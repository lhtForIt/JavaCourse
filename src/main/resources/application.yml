spring:
  main:
    allow-bean-definition-overriding: true
  datasource:
#    type: com.zaxxer.hikari.HikariDataSource
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 5512853xin
    # ���ӳ�
    hikari:
      #��С����������
      minimum-idle: 5
      # �������Ӵ�����ʱ�䣬Ĭ��600000��10���ӣ�
      idle-timeout: 180000
      # ���ӳ������������Ĭ����10
      maximum-pool-size: 10
      # �����Կ��ƴӳط��ص����ӵ�Ĭ���Զ��ύ��Ϊ,Ĭ��ֵ��true
      auto-commit: true
      # �����Կ��Ƴ������ӵ���������ڣ�ֵ0��ʾ�����������ڣ�Ĭ��1800000��30����
      max-lifetime: 1800000
      # ���ݿ����ӳ�ʱʱ��,Ĭ��30�룬��30000
      connection-timeout: 30000
      connection-test-query: SELECT 1
    first:
      url: jdbc:mysql://localhost:3306/test1?characterEncoding=UTF-8
      username: root
      password: 5512853xin
      driver-class-name: com.mysql.cj.jdbc.Driver
    second:
      url: jdbc:mysql://localhost:3306/test2?characterEncoding=UTF-8
      username: root
      password: 5512853xin
      driver-class-name: com.mysql.cj.jdbc.Driver

  shardingsphere:
    # 数据源配置
    datasource:
      # 数据源名称，多数据源以逗号分隔
      names: ds0,ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/test1?characterEncoding=UTF-8
        username: root
        password: 5512853xin
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/test2?characterEncoding=UTF-8
        username: root
        password: 5512853xin
    # 规则配置
    rules:
      sharding:
        tables:
          # 逻辑表名称
          t_order:
            # 行表达式标识符可以使用 ${...} 或 $->{...}，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 $->{...}
            actual-data-nodes: ds$->{0..1}.course_$->{1..2}
            # 配置分库策略
            database-strategy:
              standard:
                sharding-column: cid
                sharding-algorithm-name: database-inline
            # 分表策略
            table-strategy:
              standard:
                # 表分片列名称
                sharding-column: user_id
                # 分片算法名称
                sharding-algorithm-name: table-inline
            # 表主键算法
            key-generate-strategy:
              column: cid
              key-generator-name: snowflake
        # 分片算法配置
        sharding-algorithms:
          database-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{cid % 2}
          table-inline:
            # 分片算法类型
            type: INLINE
            props:
              # 分片算法的行表达式
              algorithm-expression: course_$->{user_id % 2 + 1}
        # 分布式序列算法配置
        key-generators:
          snowflake:
            # 分布式序列算法（雪花算法：SNOWFLAKE； UUID：UUID）
            type: SNOWFLAKE
            # 分布式序列算法属性配置
            props:
              # 工作机器唯一标识
              worker-id: 123
    props:
      # 展示修改以后的sql语句
      sql:
        show: true

config:
  demo:

    student1:
      id: 123
      name: KK123

    student2:
      id: 100
      name: KK100

    students:
      - id: 123
        name: KK123
      - id: 100
        name: KK100

    driverName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=UTF-8
    user: root
    passWord: 5512853xin


